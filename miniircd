#! /usr/bin/env python
# Hey, Emacs! This is -*-python-*-.
#
# Copyright (C) 2003, 2011-2013 Joel Rosdahl
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA
#
# Originallly authored by Joel Rosdahl <joel@rosdahl.net>
#
# Contributors:
#   - Matt Behrens (github.com/zigg)
#   - Alex Wright (github.com/alexwright)
#   - Bui (github.com/bui)
#   - Rui Carmo (github.com/rcarmo)
#   - Joel Kleier (github.com/zombified)
#

from optparse import OptionParser
import re
import sys

from server import Server
from utils import VERSION


def main(argv):
    op = OptionParser(
        version=VERSION,
        description="miniircd is a small and limited IRC server.")
    op.add_option(
        "-d", "--daemon",
        action="store_true",
        help="fork and become a daemon")
    op.add_option(
        "--debug",
        action="store_true",
        help="print debug messages to stdout")
    op.add_option(
        "--logdir",
        metavar="X",
        help="store channel log in directory X, if no directory is specified" \
             "no channel logging takes place")
    op.add_option(
        "--motd",
        metavar="X",
        help="display file X as message of the day")
    op.add_option(
        "-p", "--password",
        metavar="X",
        help="require connection password X; default: no password")
    op.add_option(
        "--ports",
        metavar="X",
        help="listen to ports X (a list separated by comma or whitespace);"
             " default: 6667")
    op.add_option(
        "--ssl-pem-file",
        metavar="cert.pem",
        help="Enables client-to-server SSL support, and specifies the " \
             "file containing the SSL certificate and key, stored in the " \
             "PEM format")
    op.add_option(
        "--statedir",
        metavar="X",
        help="save persistent channel state (topic, key) in directory X")
    op.add_option(
        "--verbose",
        action="store_true",
        help="be verbose (print some progress messages to stdout)")
    op.set_defaults(ports="6667")
    (options, args) = op.parse_args(argv[1:])
    if options.debug:
        options.verbose = True
    ports = []
    for port in re.split(r"[,\s]+", options.ports):
        try:
            ports.append(int(port))
        except ValueError:
            op.error("bad port: %r" % port)
    options.ports = ports
    server = Server(options)
    if options.daemon:
        server.daemonize()
    try:
        server.start()
    except KeyboardInterrupt:
        server.print_error("Interrupted.")


main(sys.argv)

# ex:et:sw=4:ts=4
